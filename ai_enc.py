#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import base64

code = b"""#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ChatGPT CLI for Termux / Kali Linux
Features:
 - Multiple API keys (switch with "change N")
 - Setup on first run
 - Colored, neat UI
 - Conversation history
 - Save settings to ~/.cgpt_config.json
 - Commands: change N, keys, clear, history, exit (or q)
Requires: python3, pip install openai colorama pyfiglet
"""
import os
import sys
import json
import time
import threading
from pathlib import Path

# ===================== USER-DEFINED API KEYS (you provided these) =====================
API_KEYS = [
"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",
"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",
"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",
"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",
"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",
"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",
"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",
"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",
]
# ======================================================================================

CONFIG_PATH = Path.home() / ".cgpt_config.json"
HISTORY_PATH = Path.home() / ".cgpt_history.json"

# --------------------- Minimal runtime dependency handling ---------------------
try:
    import openai
except Exception:
    print("Missing dependency 'openai'. Install with: pip install openai")
    sys.exit(1)

try:
    from colorama import init as colorama_init, Fore, Back, Style
except Exception:
    print("Missing dependency 'colorama'. Install with: pip install colorama")
    sys.exit(1)

# optional, for logo
try:
    import pyfiglet
    _HAS_PFIG = True
except Exception:
    _HAS_PFIG = False

colorama_init(autoreset=True)

# --------------------- Utility functions ---------------------
def mask_key(k: str) -> str:
    # mask middle of key for display
    if not k or len(k) < 12:
        return "****"
    return k[:6] + ("*" * (len(k) - 12)) + k[-6:]

def save_config(cfg: dict):
    try:
        with open(CONFIG_PATH, "w") as f:
            json.dump(cfg, f, indent=2)
    except Exception:
        pass

def load_config() -> dict:
    if CONFIG_PATH.exists():
        try:
            return json.load(open(CONFIG_PATH, "r"))
        except Exception:
            return {}
    return {}

def save_history(history_list):
    try:
        with open(HISTORY_PATH, "w") as f:
            json.dump(history_list, f, indent=2)
    except Exception:
        pass

def load_history():
    if HISTORY_PATH.exists():
        try:
            return json.load(open(HISTORY_PATH, "r"))
        except Exception:
            return []
    return []

# --------------------- Core Chat Client ---------------------
class CGPTClient:
    def __init__(self, api_keys):
        self.api_keys = api_keys.copy()
        self.cfg = load_config()
        self.key_index = self.cfg.get("key_index", 0) if self.cfg.get("key_index") is not None else 0
        if self.key_index < 0 or self.key_index >= len(self.api_keys):
            self.key_index = 0
        self.set_key(self.key_index)
        self.history = load_history()
        self.system_prompt = self.cfg.get("system_prompt", "You are a helpful assistant.")
        self.model = self.cfg.get("model", "gpt-3.5-turbo")
        self._stop_spinner = False

    def set_key(self, idx):
        self.key_index = int(idx)
        if self.key_index < 0 or self.key_index >= len(self.api_keys):
            raise IndexError("API key index out of range")
        self.api_key = self.api_keys[self.key_index]
        openai.api_key = self.api_key
        self.cfg['key_index'] = self.key_index
        save_config(self.cfg)

    def show_keys(self):
        out = []
        for i, k in enumerate(self.api_keys):
            mark = "<-- active" if i == self.key_index else ""
            out.append(f"[{i}] {mask_key(k)} {mark}")
        return "\n".join(out)

    def add_to_history(self, role, content):
        self.history.append({"role": role, "content": content})
        # limit history length
        if len(self.history) > 50:
            self.history = self.history[-50:]
        save_history(self.history)

    def spinner(self, text="Thinking"):
        chars = "|/-\\"
        i = 0
        while not self._stop_spinner:
            print(Fore.CYAN + f"\r{text} {chars[i%4]} ", end="", flush=True)
            i += 1
            time.sleep(0.12)
        print("\r" + " " * (len(text) + 4) + "\r", end="", flush=True)

    def chat(self, user_msg):
        # append user message to history
        self.add_to_history("user", user_msg)
        messages = [{"role": "system", "content": self.system_prompt}] + self.history
        # start spinner thread
        self._stop_spinner = False
        t = threading.Thread(target=self.spinner, args=("ChatGPT is typing",), daemon=True)
        t.start()
        try:
            resp = openai.ChatCompletion.create(
                model=self.model,
                messages=messages,
                temperature=0.7,
                max_tokens=1500,
                n=1,
            )
            self._stop_spinner = True
            t.join()
            answer = resp.choices[0].message['content'].strip()
            self.add_to_history("assistant", answer)
            return answer
        except Exception as e:
            self._stop_spinner = True
            t.join()
            return f"[ERROR] {str(e)}"

# --------------------- Interactive CLI ---------------------
BORDER = Fore.BLUE + ("=" * 72) + Style.RESET_ALL

def print_header(client: CGPTClient):
    os.system('clear' if os.name != 'nt' else 'cls')
    if _HAS_PFIG:
        banner = pyfiglet.figlet_format("C G P T", font="slant")
        print(Fore.GREEN + banner + Style.RESET_ALL)
    else:
        print(Fore.GREEN + "=== C G P T - ChatGPT CLI ===" + Style.RESET_ALL)
    print(BORDER)
    print(Fore.YELLOW + "Connected Key:" + Style.RESET_ALL,
          Fore.MAGENTA + mask_key(client.api_key), f"(index {client.key_index})")
    print(Fore.YELLOW + "Model:" + Style.RESET_ALL, Fore.MAGENTA + client.model)
    print(Fore.YELLOW + "System prompt:" + Style.RESET_ALL, Fore.MAGENTA + client.system_prompt)
    print(BORDER)
    print(Fore.CYAN + "Commands: " + Style.RESET_ALL +
          "change N  | keys | clear | history | setprompt | setmodel | exit/q")
    print(BORDER)

def interactive_loop(client: CGPTClient):
    print_header(client)
    try:
        while True:
            try:
                prompt = input(Fore.WHITE + "\nYou> " + Style.RESET_ALL).strip()
            except (EOFError, KeyboardInterrupt):
                print("\nExiting...")
                break

            if not prompt:
                continue

            # Commands
            if prompt.lower() in ("exit", "q"):
                print(Fore.GREEN + "Bye!" + Style.RESET_ALL)
                break

            if prompt.lower().startswith("change "):
                parts = prompt.split()
                if len(parts) >= 2 and parts[1].isdigit():
                    idx = int(parts[1])
                    try:
                        client.set_key(idx)
                        print(Fore.GREEN + f"Switched to key index {idx} ({mask_key(client.api_key)})")
                    except Exception as e:
                        print(Fore.RED + f"Failed to switch key: {e}")
                else:
                    print(Fore.YELLOW + "Usage: change N   (N = key index number)")
                continue

            if prompt.lower() == "keys":
                print(Fore.CYAN + "Available API keys:" + Style.RESET_ALL)
                print(client.show_keys())
                continue

            if prompt.lower() == "clear":
                # clear history (not the saved config)
                client.history = []
                save_history(client.history)
                print(Fore.GREEN + "Conversation history cleared.")
                continue

            if prompt.lower() == "history":
                hist = client.history or []
                print(Fore.CYAN + "Conversation history (role -> content):" + Style.RESET_ALL)
                for i, m in enumerate(hist):
                    role = m.get("role", "?")
                    content = m.get("content", "")
                    print(Fore.YELLOW + f"[{i}] {role}: " + Style.RESET_ALL + content[:100].replace("\n", " "))
                continue

            if prompt.lower().startswith("setprompt "):
                new = prompt[len("setprompt "):].strip()
                if new:
                    client.system_prompt = new
                    client.cfg['system_prompt'] = new
                    save_config(client.cfg)
                    print(Fore.GREEN + "System prompt updated.")
                else:
                    print(Fore.YELLOW + "Usage: setprompt <text>")
                continue

            if prompt.lower().startswith("setmodel "):
                new = prompt[len("setmodel "):].strip()
                if new:
                    client.model = new
                    client.cfg['model'] = new
                    save_config(client.cfg)
                    print(Fore.GREEN + f"Model updated to {new}.")
                else:
                    print(Fore.YELLOW + "Usage: setmodel <model_name>")
                continue

            # Regular chat
            answer = client.chat(prompt)
            # nice print
            print(Fore.MAGENTA + "\nChatGPT> " + Style.RESET_ALL + answer)

    except Exception as e:
        print(Fore.RED + "Fatal error: " + str(e))
    finally:
        save_history(client.history)
        save_config(client.cfg)

# --------------------- First-time setup ---------------------
def first_time_setup(client: CGPTClient):
    print_header(client)
    print(Fore.CYAN + "First-time setup:" + Style.RESET_ALL)
    print("Detected multiple API keys. Choose default key index to use on startup.")
    for i, k in enumerate(client.api_keys):
        default_marker = "<--" if i == client.key_index else ""
        print(f"  [{i}] {mask_key(k)} {default_marker}")
    while True:
        try:
            choice = input(Fore.WHITE + "Select key index (or press Enter to keep current): " + Style.RESET_ALL).strip()
        except (EOFError, KeyboardInterrupt):
            print("\nAborted setup.")
            return
        if choice == "":
            break
        if choice.isdigit():
            idx = int(choice)
            if 0 <= idx < len(client.api_keys):
                client.set_key(idx)
                print(Fore.GREEN + f"Default key set to index {idx}.")
                break
            else:
                print(Fore.YELLOW + "Index out of range.")
        else:
            print(Fore.YELLOW + "Please enter a valid number.")
    # Ask to set system prompt
    try:
        sp = input(Fore.WHITE + "Optional: custom system prompt (Enter to skip): " + Style.RESET_ALL).strip()
        if sp:
            client.system_prompt = sp
            client.cfg['system_prompt'] = sp
            save_config(client.cfg)
            print(Fore.GREEN + "System prompt saved.")
    except (EOFError, KeyboardInterrupt):
        pass

# --------------------- Main ---------------------
def main():
    client = CGPTClient(API_KEYS)
    # If config didn't exist, run first-time setup
    if not CONFIG_PATH.exists():
        first_time_setup(client)
    interactive_loop(client)

if __name__ == "__main__":
    main()
"""

exec(compile(base64.b64decode(code), "<string>", "exec"))
